/*
 * Project Management API
 *
 * Project Management API
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using projectManagement.API.Attributes;
using projectManagement.API.Models;

namespace projectManagement.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class ProjectApiController : ControllerBase
    { 
        /// <summary>
        /// Create Project
        /// </summary>
        /// <param name="project"></param>
        /// <response code="201">Project created successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("Projects")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateProject")]
        [SwaggerResponse(statusCode: 201, type: typeof(Project), description: "Project created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        public abstract Task<IActionResult> CreateProject([FromBody]Project project);

        /// <summary>
        /// Delete Project
        /// </summary>
        /// <param name="id">ID of project to delete</param>
        /// <response code="200">Project deleted successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Project not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("projects/{id}/deleteProject")]
        [ValidateModelState]
        [SwaggerOperation("DeleteProject")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        public abstract Task<IActionResult> DeleteProject([FromRoute (Name = "id")][Required]long id);

        /// <summary>
        /// Get All Projects
        /// </summary>
        /// <remarks>Get a list of projects</remarks>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalCount"></param>
        /// <param name="pageNumber"></param>
        /// <param name="status"></param>
        /// <param name="userId"></param>
        /// <param name="projectId"></param>
        /// <param name="role"></param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("Projects")]
        [ValidateModelState]
        [SwaggerOperation("GetProjects")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetProjects200Response), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> GetProjects([FromQuery (Name = "pageIndex")]long? pageIndex, [FromQuery (Name = "pageSize")]long? pageSize, [FromQuery (Name = "totalCount")]long? totalCount, [FromQuery (Name = "pageNumber")]long? pageNumber, [FromQuery (Name = "status")]string status, [FromQuery (Name = "userId")]long? userId, [FromQuery (Name = "projectId")]long? projectId, [FromQuery (Name = "role")]string role);

        /// <summary>
        /// Update Project
        /// </summary>
        /// <param name="project"></param>
        /// <response code="200">Project updated successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Project not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("Projects")]
        [Consumes("application/json", "application/xml")]
        [ValidateModelState]
        [SwaggerOperation("UpdateProject")]
        [SwaggerResponse(statusCode: 200, type: typeof(Project), description: "Project updated successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        public abstract Task<IActionResult> UpdateProject([FromBody]Project project);

        /// <summary>
        /// Update Project Status
        /// </summary>
        /// <param name="updateUserProjectStatusRequest"></param>
        /// <response code="200">Project status updated successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Project not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("Projects/updateUserProjectStatus")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateUserProjectStatus")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        public abstract Task<IActionResult> UpdateUserProjectStatus([FromBody]UpdateUserProjectStatusRequest updateUserProjectStatusRequest);
    }
}
