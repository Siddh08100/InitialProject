/*
 * Project Management API
 *
 * Project Management API
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using projectManagement.API.Attributes;
using projectManagement.API.Models;

namespace projectManagement.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class TaskApiController : ControllerBase
    { 
        /// <summary>
        /// Create Task
        /// </summary>
        /// <param name="createTaskRequest"></param>
        /// <response code="201">Task created successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("Tasks")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateTask")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        public abstract Task<IActionResult> CreateTask([FromBody]CreateTaskRequest createTaskRequest);

        /// <summary>
        /// Get Task by Id
        /// </summary>
        /// <param name="id">ID of task to retrieve</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Task not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("Tasks/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetTaskById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Models.Task), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid ID supplied")]
        public abstract Task<IActionResult> GetTaskById([FromRoute (Name = "id")][Required]long id);

        /// <summary>
        /// Get All Tasks
        /// </summary>
        /// <remarks>Get a list of tasks</remarks>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="status"></param>
        /// <param name="userId"></param>
        /// <param name="projectId"></param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("Tasks")]
        [ValidateModelState]
        [SwaggerOperation("GetTasks")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetTasks200Response), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> GetTasks([FromQuery (Name = "pageIndex")]long? pageIndex, [FromQuery (Name = "pageSize")]long? pageSize, [FromQuery (Name = "status")]string status, [FromQuery (Name = "userId")]long? userId, [FromQuery (Name = "projectId")]long? projectId);

        /// <summary>
        /// Update Task
        /// </summary>
        /// <param name="updateTaskRequest"></param>
        /// <response code="200">Task updated successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Task not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("Tasks")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateTask")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        public abstract Task<IActionResult> UpdateTask([FromBody]UpdateTaskRequest updateTaskRequest);
    }
}
