/*
 * Project Management API
 *
 * Project Management API
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using projectManagement.API.Attributes;
using projectManagement.API.Models;

namespace projectManagement.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class UserApiController : ControllerBase
    { 
        /// <summary>
        /// Create User
        /// </summary>
        /// <param name="createUser"></param>
        /// <response code="201">User created successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("Users")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateUser")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        public abstract Task<IActionResult> CreateUser([FromBody]CreateUser createUser);

        /// <summary>
        /// Delete User
        /// </summary>
        /// <param name="id">ID of user to delete</param>
        /// <response code="204">User deleted successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">User not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("Users/{id}/deleteUser")]
        [ValidateModelState]
        [SwaggerOperation("DeleteUser")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        public abstract Task<IActionResult> DeleteUser([FromRoute (Name = "id")][Required]long id);

        /// <summary>
        /// Finds User by Id..
        /// </summary>
        /// <param name="id">Status values that need to be considered for filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        /// <response code="404">User not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("Users/{id}")]
        [ValidateModelState]
        [SwaggerOperation("FindUserById")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid status value")]
        public abstract Task<IActionResult> FindUserById([FromRoute (Name = "id")][Required]long id);

        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>Retrieve a list of users</remarks>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("Users")]
        [ValidateModelState]
        [SwaggerOperation("GetUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetUsers200Response), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public abstract Task<IActionResult> GetUsers([FromQuery (Name = "pageIndex")]long? pageIndex, [FromQuery (Name = "pageSize")]long? pageSize);

        /// <summary>
        /// Update User
        /// </summary>
        /// <param name="user"></param>
        /// <response code="200">User updated successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">User not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("Users")]
        [Consumes("application/json", "application/xml")]
        [ValidateModelState]
        [SwaggerOperation("UpdateUser")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        public abstract Task<IActionResult> UpdateUser([FromBody]User user);
    }
}
