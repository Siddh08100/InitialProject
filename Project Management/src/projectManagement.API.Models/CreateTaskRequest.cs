/*
 * Project Management API
 *
 * Project Management API
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using projectManagement.API.Converters;

namespace projectManagement.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateTaskRequest : IEquatable<CreateTaskRequest>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>1</example> */
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /* <example>Task Title 1</example> */
        [Required]
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>Description of Task 1</example> */
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /* <example>In Progress</example> */
        [Required]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets AssignedTo
        /// </summary>
        /* <example>1</example> */
        [DataMember(Name="assignedTo", EmitDefaultValue=true)]
        public long AssignedTo { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        /* <example>1</example> */
        [DataMember(Name="projectId", EmitDefaultValue=true)]
        public long ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [Required]
        [DataMember(Name="dueDate", EmitDefaultValue=true)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTaskRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AssignedTo: ").Append(AssignedTo).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateTaskRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateTaskRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateTaskRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTaskRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    AssignedTo == other.AssignedTo ||
                    
                    AssignedTo.Equals(other.AssignedTo)
                ) && 
                (
                    ProjectId == other.ProjectId ||
                    
                    ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    DueDate == other.DueDate ||
                    
                    DueDate.Equals(other.DueDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssignedTo.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProjectId.GetHashCode();
                    
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateTaskRequest left, CreateTaskRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateTaskRequest left, CreateTaskRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
