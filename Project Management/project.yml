openapi: '3.0.3'
info:
  title: Project Management API 
  description: Project Management API
  version: '1.0'
servers:
  - url: https://user.server.test/v1
tags:
  - name: User
    description: User operations
  - name: Project
    description: Order operations
  - name: Task
    description: Task operations
paths:
  /Users:
    get:
      tags:
        - User
      summary: Get Users
      operationId: getUsers
      description: Retrieve a list of users
      parameters:
        - name: pageIndex
          in: query
          schema:
            type: integer
            format: int64
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int64
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    type: object
                    $ref: '#/components/schemas/paging'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      tags:
        - User
      summary: Create User
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
    put:
      tags:
        - User
      summary: Update User
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: User not found
        default:
          description: Unexpected error
  /Users/{id}:
    get:
      tags:
        - User
      summary: Finds User by Id..
      operationId: findUserById
      parameters:
        - name: id
          in: path
          description: Status values that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '404':
          description: User not found
        default:
          description: Unexpected error
  /Users/{id}/deleteUser:
    put:
      tags:
        - User
      summary: Delete User
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: User not found
        default:
          description: Unexpected error
  
  /Projects:
    get:
      tags:
        - Project
      summary: Get All Projects
      operationId: getProjects
      description: Get a list of projects
      parameters:
        - name: pageIndex
          in: query
          schema:
            type: integer
            format: int64
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int64
            default: 10
        - name: status
          in: query
          required: false
          schema:
            type: string
            default: ""
            enum:
              - Pending
              - In Progress
              - Completed
        - name: userId
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - name: projectId
          in: query
          schema:
            default: 0
            type: integer
            format: int64
        - name: role
          in: query
          schema:
            type: string
            default: ""
            enum:
              - Owner
              - Contributor
              - Viewer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    type: object
                    $ref: '#/components/schemas/paging'
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      tags:
        - Project
      summary: Create Project
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProject'
      responses:
        '201':
          description: Project created successfully

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
    put:
      tags:
        - Project
      summary: Update Project
      operationId: updateProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/xml:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Project not found
        default:
          description: Unexpected error    
  /Projects/updateUserProjectStatus:
    put:
      tags:
        - Project
      summary: Update Project Status
      operationId: updateUserProjectStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: integer
                  format: int64
                  example: 1
                userId:
                  type: integer
                  format: int64
                  example: 1
                status:
                  type: string
                  example: "Owner"
      responses:
        '200':
          description: Project status updated successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Project not found
        default:
          description: Unexpected error
  /projects/{id}/deleteProject:
    put:
      tags:
        - Project
      summary: Delete Project
      operationId: deleteProject
      parameters:
        - name: id
          in: path
          description: ID of project to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Project deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Project not found
        default:
          description: Unexpected error
  
  /Tasks:
    get:
      tags:
        - Task
      summary: Get All Tasks
      operationId: getTasks
      description: Get a list of tasks
      parameters:
        - name: pageIndex
          in: query
          schema:
            type: integer
            format: int64
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int64
            default: 10
        - name: status
          in: query
          required: false
          schema:
            type: string
            default: ""
            enum:
              - Pending
              - In Progress
              - Completed
        - name: userId
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - name: projectId
          in: query
          schema:
            default: 0
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    type: object
                    $ref: '#/components/schemas/paging'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      tags:
        - Task
      summary: Create Task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                required:
                  - title
                  - description
                  - status
                  - dueDate
                properties:
                  title:
                    type: string
                    example: "Task Title 1"
                  description:
                    type: string
                    example: "Description of Task 1"
                  status:
                    type: string
                    example: "In Progress"
                  assignedTo:
                    type: integer
                    format: int64
                    example: 1
                  projectId:
                    type: integer
                    format: int64
                    example: 1
                  dueDate:
                    type: string
                    format: date-time
      responses:
        '201':
          description: Task created successfully 
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
    put:
      tags:
        - Task
      summary: Update Task
      operationId: updateTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                required:
                  - title
                  - description
                  - status
                  - dueDate
                  - assignedTo
                  - projectId
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  title:
                    type: string
                    example: "Task Title 1"
                  description:
                    type: string
                    example: "Description of Task 1"
                  status:
                    type: string
                    example: "In Progress"
                  assignedTo:
                    type: integer
                    format: int64
                    example: 1
                  projectId:
                    type: integer
                    format: int64
                    example: 1
                  dueDate:
                    type: string
                    format: date-time
      responses:
        '200':
          description: Task updated successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Task not found
        default:
          description: Unexpected error
  /Tasks/{id}:
    get:
      tags:
        - Task
      summary: Get Task by Id
      operationId: getTaskById
      parameters:
        - name: id
          in: path
          description: ID of task to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '404':
          description: Task not found
        default:
          description: Unexpected error

components:
  schemas:
    paging:
      type: object
      properties:
        pageIndex:
          type: integer
          format: int64
          example: 1
        pageSize:
          type: integer
          format: int64
          example: 10
        totalCount:
          type: integer
          format: int64
          example: 100
        pageNumber:
          type: integer
          format: int64
          example: 1
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        userName:
          type: string
          example: JohnDoe@123
        email:
          type: string
          format: email
          example: johnDoe@gmail.com
        role:
          type: string
          example: TSE
        password:
          type: string
          format: password
          example: "password123"
      required:
        - email
        - firstName
        - lastName
        - userName
        - password
    CreateUser:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        userName:
          type: string
          example: JohnDoe@123
        email:
          type: string
          format: email
          example: johnDoe@gmail.com
        role:
          type: string
          example: TSE
        password:
          type: string
          format: password
          example: "password123"
      required:
        - email
        - firstName
        - lastName
        - userName
        - password
    Project:
      required:
        - name
        - description
        - status
      type: object
      properties:
        Id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Project Management System"
        description:
          type: string
          example: "Manage Projects"
        status:
          type: string
          example: "Pending"
        createdBy:
          type: integer
          format: int64
          example: 1
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
    CreateProject:
      required:
        - name
        - description
        - status
      type: object
      properties:
        name:
          type: string
          example: "Project Management System"
        description:
          type: string
          example: "Manage Projects"
        status:
          type: string
          example: "Pending"
        createdBy:
          type: integer
          format: int64
          example: 1
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        projectName:
          type: string
          example: "Project Management System"
        name:
          type: string
          example: "Task 1"
        title:
          type: string
          example: "Task Title 1"
        description:
          type: string
          example: "Description of Task 1"
        status:
          type: string
          example: "In Progress"
        assignedTo:
          type: string
          example: "John Doe"
        UserId:
          type: integer
          format: int64
          example: 1
        dueDate:
          type: string
          format: date-time
    error:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Bad Request
      required:
        - code
        - message